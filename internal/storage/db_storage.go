package storage

import (
	"context"
	"crypto/sha256"
	"database/sql"
	"encoding/hex"
	"log"
	"time"

	_ "github.com/jackc/pgx/v5/stdlib"
	"github.com/size12/gophermart/internal/config"
	"github.com/size12/gophermart/internal/models"
)

type DBStorage struct {
	Cfg config.Config
	DB  *sql.DB
}

func NewDBStorage(cfg config.Config) (*DBStorage, error) {
	s := &DBStorage{Cfg: cfg}

	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	DB, err := sql.Open("pgx", cfg.DataBaseURI)

	if err != nil {
		log.Println("Failed open DB:", err)
		return s, err
	}

	_, err = DB.ExecContext(ctx, `CREATE TABLE IF NOT EXISTS users (id INT GENERATED BY DEFAULT AS IDENTITY, login VARCHAR(255), passw VARCHAR(255), cookie VARCHAR(255), balance INT, withdrawn INT)`)
	if err != nil {
		log.Println("Failed create 'users' table:", err)
		return s, err
	}

	_, err = DB.ExecContext(ctx, `CREATE TABLE IF NOT EXISTS orders (num INT GENERATED BY DEFAULT AS IDENTITY, userid INT, status VARCHAR(255))`)
	if err != nil {
		log.Println("Failed create 'orders' table:", err)
		return s, err
	}

	s.DB = DB

	return s, nil
}

func (s *DBStorage) GetUser(ctx context.Context, key, value string) (models.User, error) {
	ctx, cancel := context.WithTimeout(ctx, 1*time.Second)
	defer cancel()

	user := models.User{}

	var row *sql.Row

	switch key {
	case "cookie":
		query := `SELECT * FROM users WHERE cookie = $1`
		row = s.DB.QueryRowContext(ctx, query, value)
	case "login":
		query := `SELECT * FROM users WHERE login = $1`
		row = s.DB.QueryRowContext(ctx, query, value)
	}

	switch err := row.Scan(&user.ID, &user.Login, &user.Password, &user.Cookie, &user.Balance, &user.Withdrawn); err {
	case sql.ErrNoRows:
		return user, ErrNotFound
	case nil:
		return user, nil
	default:
		log.Println("Failed get user:", err)
		return user, err
	}
}

func (s *DBStorage) AddUser(ctx context.Context, user models.User) (string, error) {
	ctx, cancel := context.WithTimeout(ctx, 1*time.Second)
	defer cancel()

	_, err := s.GetUser(ctx, "login", user.Login)
	if err == nil {
		return "", ErrLoginExists
	}

	userCookie, err := GenerateCookie()
	if err != nil {
		return "", err
	}

	h := sha256.New()
	h.Write([]byte(user.Login + user.Password))
	hash := hex.EncodeToString(h.Sum(nil))

	_, err = s.DB.ExecContext(ctx, `INSERT INTO users (login, passw, cookie, balance, withdrawn) VALUES ($1, $2, $3, $4, $5)`, user.Login, hash, userCookie, 0, 0)

	if err != nil {
		log.Println("Failed added new user to DB:", err)
		return "", err
	}

	return userCookie, nil
}
